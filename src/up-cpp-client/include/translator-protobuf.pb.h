// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translator-protobuf.proto

#ifndef PROTOBUF_INCLUDED_translator_2dprotobuf_2eproto
#define PROTOBUF_INCLUDED_translator_2dprotobuf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_translator_2dprotobuf_2eproto 

namespace protobuf_translator_2dprotobuf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_translator_2dprotobuf_2eproto
namespace translator {
class GetClaimedAddressRequest;
class GetClaimedAddressRequestDefaultTypeInternal;
extern GetClaimedAddressRequestDefaultTypeInternal _GetClaimedAddressRequest_default_instance_;
class GetClaimedAddressResponse;
class GetClaimedAddressResponseDefaultTypeInternal;
extern GetClaimedAddressResponseDefaultTypeInternal _GetClaimedAddressResponse_default_instance_;
class ReadDataByIdentifierRequest;
class ReadDataByIdentifierRequestDefaultTypeInternal;
extern ReadDataByIdentifierRequestDefaultTypeInternal _ReadDataByIdentifierRequest_default_instance_;
class ReadDataByIdentifierResponse;
class ReadDataByIdentifierResponseDefaultTypeInternal;
extern ReadDataByIdentifierResponseDefaultTypeInternal _ReadDataByIdentifierResponse_default_instance_;
class ReadResponse;
class ReadResponseDefaultTypeInternal;
extern ReadResponseDefaultTypeInternal _ReadResponse_default_instance_;
class UDSCANFormat;
class UDSCANFormatDefaultTypeInternal;
extern UDSCANFormatDefaultTypeInternal _UDSCANFormat_default_instance_;
class UDSCloseCommChannelRequest;
class UDSCloseCommChannelRequestDefaultTypeInternal;
extern UDSCloseCommChannelRequestDefaultTypeInternal _UDSCloseCommChannelRequest_default_instance_;
class UDSCloseCommChannelResponse;
class UDSCloseCommChannelResponseDefaultTypeInternal;
extern UDSCloseCommChannelResponseDefaultTypeInternal _UDSCloseCommChannelResponse_default_instance_;
class UDSOpenCommChannelRequest;
class UDSOpenCommChannelRequestDefaultTypeInternal;
extern UDSOpenCommChannelRequestDefaultTypeInternal _UDSOpenCommChannelRequest_default_instance_;
class UDSOpenCommChannelResponse;
class UDSOpenCommChannelResponseDefaultTypeInternal;
extern UDSOpenCommChannelResponseDefaultTypeInternal _UDSOpenCommChannelResponse_default_instance_;
}  // namespace translator
namespace google {
namespace protobuf {
template<> ::translator::GetClaimedAddressRequest* Arena::CreateMaybeMessage<::translator::GetClaimedAddressRequest>(Arena*);
template<> ::translator::GetClaimedAddressResponse* Arena::CreateMaybeMessage<::translator::GetClaimedAddressResponse>(Arena*);
template<> ::translator::ReadDataByIdentifierRequest* Arena::CreateMaybeMessage<::translator::ReadDataByIdentifierRequest>(Arena*);
template<> ::translator::ReadDataByIdentifierResponse* Arena::CreateMaybeMessage<::translator::ReadDataByIdentifierResponse>(Arena*);
template<> ::translator::ReadResponse* Arena::CreateMaybeMessage<::translator::ReadResponse>(Arena*);
template<> ::translator::UDSCANFormat* Arena::CreateMaybeMessage<::translator::UDSCANFormat>(Arena*);
template<> ::translator::UDSCloseCommChannelRequest* Arena::CreateMaybeMessage<::translator::UDSCloseCommChannelRequest>(Arena*);
template<> ::translator::UDSCloseCommChannelResponse* Arena::CreateMaybeMessage<::translator::UDSCloseCommChannelResponse>(Arena*);
template<> ::translator::UDSOpenCommChannelRequest* Arena::CreateMaybeMessage<::translator::UDSOpenCommChannelRequest>(Arena*);
template<> ::translator::UDSOpenCommChannelResponse* Arena::CreateMaybeMessage<::translator::UDSOpenCommChannelResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace translator {

// ===================================================================

class GetClaimedAddressRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.GetClaimedAddressRequest) */ {
 public:
  GetClaimedAddressRequest();
  virtual ~GetClaimedAddressRequest();

  GetClaimedAddressRequest(const GetClaimedAddressRequest& from);

  inline GetClaimedAddressRequest& operator=(const GetClaimedAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClaimedAddressRequest(GetClaimedAddressRequest&& from) noexcept
    : GetClaimedAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetClaimedAddressRequest& operator=(GetClaimedAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClaimedAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClaimedAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetClaimedAddressRequest*>(
               &_GetClaimedAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetClaimedAddressRequest* other);
  friend void swap(GetClaimedAddressRequest& a, GetClaimedAddressRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClaimedAddressRequest* New() const final {
    return CreateMaybeMessage<GetClaimedAddressRequest>(NULL);
  }

  GetClaimedAddressRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetClaimedAddressRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetClaimedAddressRequest& from);
  void MergeFrom(const GetClaimedAddressRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClaimedAddressRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string sequenceNo = 2;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 2;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // @@protoc_insertion_point(class_scope:translator.GetClaimedAddressRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetClaimedAddressResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.GetClaimedAddressResponse) */ {
 public:
  GetClaimedAddressResponse();
  virtual ~GetClaimedAddressResponse();

  GetClaimedAddressResponse(const GetClaimedAddressResponse& from);

  inline GetClaimedAddressResponse& operator=(const GetClaimedAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClaimedAddressResponse(GetClaimedAddressResponse&& from) noexcept
    : GetClaimedAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetClaimedAddressResponse& operator=(GetClaimedAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClaimedAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClaimedAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetClaimedAddressResponse*>(
               &_GetClaimedAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetClaimedAddressResponse* other);
  friend void swap(GetClaimedAddressResponse& a, GetClaimedAddressResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClaimedAddressResponse* New() const final {
    return CreateMaybeMessage<GetClaimedAddressResponse>(NULL);
  }

  GetClaimedAddressResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetClaimedAddressResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetClaimedAddressResponse& from);
  void MergeFrom(const GetClaimedAddressResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClaimedAddressResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string sequenceNo = 2;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 2;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // string claimedAddress = 3;
  void clear_claimedaddress();
  static const int kClaimedAddressFieldNumber = 3;
  const ::std::string& claimedaddress() const;
  void set_claimedaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_claimedaddress(::std::string&& value);
  #endif
  void set_claimedaddress(const char* value);
  void set_claimedaddress(const char* value, size_t size);
  ::std::string* mutable_claimedaddress();
  ::std::string* release_claimedaddress();
  void set_allocated_claimedaddress(::std::string* claimedaddress);

  // string responseCode = 4;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 4;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const char* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:translator.GetClaimedAddressResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  ::google::protobuf::internal::ArenaStringPtr claimedaddress_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UDSCANFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.UDSCANFormat) */ {
 public:
  UDSCANFormat();
  virtual ~UDSCANFormat();

  UDSCANFormat(const UDSCANFormat& from);

  inline UDSCANFormat& operator=(const UDSCANFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UDSCANFormat(UDSCANFormat&& from) noexcept
    : UDSCANFormat() {
    *this = ::std::move(from);
  }

  inline UDSCANFormat& operator=(UDSCANFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UDSCANFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDSCANFormat* internal_default_instance() {
    return reinterpret_cast<const UDSCANFormat*>(
               &_UDSCANFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UDSCANFormat* other);
  friend void swap(UDSCANFormat& a, UDSCANFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UDSCANFormat* New() const final {
    return CreateMaybeMessage<UDSCANFormat>(NULL);
  }

  UDSCANFormat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UDSCANFormat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UDSCANFormat& from);
  void MergeFrom(const UDSCANFormat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDSCANFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string canPhysReqFormat = 1;
  void clear_canphysreqformat();
  static const int kCanPhysReqFormatFieldNumber = 1;
  const ::std::string& canphysreqformat() const;
  void set_canphysreqformat(const ::std::string& value);
  #if LANG_CXX11
  void set_canphysreqformat(::std::string&& value);
  #endif
  void set_canphysreqformat(const char* value);
  void set_canphysreqformat(const char* value, size_t size);
  ::std::string* mutable_canphysreqformat();
  ::std::string* release_canphysreqformat();
  void set_allocated_canphysreqformat(::std::string* canphysreqformat);

  // string canRespUSDTFormat = 2;
  void clear_canrespusdtformat();
  static const int kCanRespUSDTFormatFieldNumber = 2;
  const ::std::string& canrespusdtformat() const;
  void set_canrespusdtformat(const ::std::string& value);
  #if LANG_CXX11
  void set_canrespusdtformat(::std::string&& value);
  #endif
  void set_canrespusdtformat(const char* value);
  void set_canrespusdtformat(const char* value, size_t size);
  ::std::string* mutable_canrespusdtformat();
  ::std::string* release_canrespusdtformat();
  void set_allocated_canrespusdtformat(::std::string* canrespusdtformat);

  // @@protoc_insertion_point(class_scope:translator.UDSCANFormat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr canphysreqformat_;
  ::google::protobuf::internal::ArenaStringPtr canrespusdtformat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UDSOpenCommChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.UDSOpenCommChannelRequest) */ {
 public:
  UDSOpenCommChannelRequest();
  virtual ~UDSOpenCommChannelRequest();

  UDSOpenCommChannelRequest(const UDSOpenCommChannelRequest& from);

  inline UDSOpenCommChannelRequest& operator=(const UDSOpenCommChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UDSOpenCommChannelRequest(UDSOpenCommChannelRequest&& from) noexcept
    : UDSOpenCommChannelRequest() {
    *this = ::std::move(from);
  }

  inline UDSOpenCommChannelRequest& operator=(UDSOpenCommChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UDSOpenCommChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDSOpenCommChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UDSOpenCommChannelRequest*>(
               &_UDSOpenCommChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UDSOpenCommChannelRequest* other);
  friend void swap(UDSOpenCommChannelRequest& a, UDSOpenCommChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UDSOpenCommChannelRequest* New() const final {
    return CreateMaybeMessage<UDSOpenCommChannelRequest>(NULL);
  }

  UDSOpenCommChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UDSOpenCommChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UDSOpenCommChannelRequest& from);
  void MergeFrom(const UDSOpenCommChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDSOpenCommChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .translator.UDSCANFormat canFormat = 5;
  int canformat_size() const;
  void clear_canformat();
  static const int kCanFormatFieldNumber = 5;
  ::translator::UDSCANFormat* mutable_canformat(int index);
  ::google::protobuf::RepeatedPtrField< ::translator::UDSCANFormat >*
      mutable_canformat();
  const ::translator::UDSCANFormat& canformat(int index) const;
  ::translator::UDSCANFormat* add_canformat();
  const ::google::protobuf::RepeatedPtrField< ::translator::UDSCANFormat >&
      canformat() const;

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string sequenceNo = 2;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 2;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // string toolAddress = 3;
  void clear_tooladdress();
  static const int kToolAddressFieldNumber = 3;
  const ::std::string& tooladdress() const;
  void set_tooladdress(const ::std::string& value);
  #if LANG_CXX11
  void set_tooladdress(::std::string&& value);
  #endif
  void set_tooladdress(const char* value);
  void set_tooladdress(const char* value, size_t size);
  ::std::string* mutable_tooladdress();
  ::std::string* release_tooladdress();
  void set_allocated_tooladdress(::std::string* tooladdress);

  // string ecuAddress = 4;
  void clear_ecuaddress();
  static const int kEcuAddressFieldNumber = 4;
  const ::std::string& ecuaddress() const;
  void set_ecuaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ecuaddress(::std::string&& value);
  #endif
  void set_ecuaddress(const char* value);
  void set_ecuaddress(const char* value, size_t size);
  ::std::string* mutable_ecuaddress();
  ::std::string* release_ecuaddress();
  void set_allocated_ecuaddress(::std::string* ecuaddress);

  // string resourceName = 6;
  void clear_resourcename();
  static const int kResourceNameFieldNumber = 6;
  const ::std::string& resourcename() const;
  void set_resourcename(const ::std::string& value);
  #if LANG_CXX11
  void set_resourcename(::std::string&& value);
  #endif
  void set_resourcename(const char* value);
  void set_resourcename(const char* value, size_t size);
  ::std::string* mutable_resourcename();
  ::std::string* release_resourcename();
  void set_allocated_resourcename(::std::string* resourcename);

  // @@protoc_insertion_point(class_scope:translator.UDSOpenCommChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::translator::UDSCANFormat > canformat_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  ::google::protobuf::internal::ArenaStringPtr tooladdress_;
  ::google::protobuf::internal::ArenaStringPtr ecuaddress_;
  ::google::protobuf::internal::ArenaStringPtr resourcename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UDSOpenCommChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.UDSOpenCommChannelResponse) */ {
 public:
  UDSOpenCommChannelResponse();
  virtual ~UDSOpenCommChannelResponse();

  UDSOpenCommChannelResponse(const UDSOpenCommChannelResponse& from);

  inline UDSOpenCommChannelResponse& operator=(const UDSOpenCommChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UDSOpenCommChannelResponse(UDSOpenCommChannelResponse&& from) noexcept
    : UDSOpenCommChannelResponse() {
    *this = ::std::move(from);
  }

  inline UDSOpenCommChannelResponse& operator=(UDSOpenCommChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UDSOpenCommChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDSOpenCommChannelResponse* internal_default_instance() {
    return reinterpret_cast<const UDSOpenCommChannelResponse*>(
               &_UDSOpenCommChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UDSOpenCommChannelResponse* other);
  friend void swap(UDSOpenCommChannelResponse& a, UDSOpenCommChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UDSOpenCommChannelResponse* New() const final {
    return CreateMaybeMessage<UDSOpenCommChannelResponse>(NULL);
  }

  UDSOpenCommChannelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UDSOpenCommChannelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UDSOpenCommChannelResponse& from);
  void MergeFrom(const UDSOpenCommChannelResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDSOpenCommChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string connectionID = 2;
  void clear_connectionid();
  static const int kConnectionIDFieldNumber = 2;
  const ::std::string& connectionid() const;
  void set_connectionid(const ::std::string& value);
  #if LANG_CXX11
  void set_connectionid(::std::string&& value);
  #endif
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  ::std::string* mutable_connectionid();
  ::std::string* release_connectionid();
  void set_allocated_connectionid(::std::string* connectionid);

  // string sequenceNo = 3;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 3;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // string responseCode = 4;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 4;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const char* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:translator.UDSOpenCommChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr connectionid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UDSCloseCommChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.UDSCloseCommChannelRequest) */ {
 public:
  UDSCloseCommChannelRequest();
  virtual ~UDSCloseCommChannelRequest();

  UDSCloseCommChannelRequest(const UDSCloseCommChannelRequest& from);

  inline UDSCloseCommChannelRequest& operator=(const UDSCloseCommChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UDSCloseCommChannelRequest(UDSCloseCommChannelRequest&& from) noexcept
    : UDSCloseCommChannelRequest() {
    *this = ::std::move(from);
  }

  inline UDSCloseCommChannelRequest& operator=(UDSCloseCommChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UDSCloseCommChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDSCloseCommChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UDSCloseCommChannelRequest*>(
               &_UDSCloseCommChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(UDSCloseCommChannelRequest* other);
  friend void swap(UDSCloseCommChannelRequest& a, UDSCloseCommChannelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UDSCloseCommChannelRequest* New() const final {
    return CreateMaybeMessage<UDSCloseCommChannelRequest>(NULL);
  }

  UDSCloseCommChannelRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UDSCloseCommChannelRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UDSCloseCommChannelRequest& from);
  void MergeFrom(const UDSCloseCommChannelRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDSCloseCommChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string connectionID = 2;
  void clear_connectionid();
  static const int kConnectionIDFieldNumber = 2;
  const ::std::string& connectionid() const;
  void set_connectionid(const ::std::string& value);
  #if LANG_CXX11
  void set_connectionid(::std::string&& value);
  #endif
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  ::std::string* mutable_connectionid();
  ::std::string* release_connectionid();
  void set_allocated_connectionid(::std::string* connectionid);

  // string sequenceNo = 3;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 3;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // @@protoc_insertion_point(class_scope:translator.UDSCloseCommChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr connectionid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UDSCloseCommChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.UDSCloseCommChannelResponse) */ {
 public:
  UDSCloseCommChannelResponse();
  virtual ~UDSCloseCommChannelResponse();

  UDSCloseCommChannelResponse(const UDSCloseCommChannelResponse& from);

  inline UDSCloseCommChannelResponse& operator=(const UDSCloseCommChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UDSCloseCommChannelResponse(UDSCloseCommChannelResponse&& from) noexcept
    : UDSCloseCommChannelResponse() {
    *this = ::std::move(from);
  }

  inline UDSCloseCommChannelResponse& operator=(UDSCloseCommChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UDSCloseCommChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UDSCloseCommChannelResponse* internal_default_instance() {
    return reinterpret_cast<const UDSCloseCommChannelResponse*>(
               &_UDSCloseCommChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UDSCloseCommChannelResponse* other);
  friend void swap(UDSCloseCommChannelResponse& a, UDSCloseCommChannelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UDSCloseCommChannelResponse* New() const final {
    return CreateMaybeMessage<UDSCloseCommChannelResponse>(NULL);
  }

  UDSCloseCommChannelResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UDSCloseCommChannelResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UDSCloseCommChannelResponse& from);
  void MergeFrom(const UDSCloseCommChannelResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDSCloseCommChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string connectionID = 2;
  void clear_connectionid();
  static const int kConnectionIDFieldNumber = 2;
  const ::std::string& connectionid() const;
  void set_connectionid(const ::std::string& value);
  #if LANG_CXX11
  void set_connectionid(::std::string&& value);
  #endif
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  ::std::string* mutable_connectionid();
  ::std::string* release_connectionid();
  void set_allocated_connectionid(::std::string* connectionid);

  // string sequenceNo = 3;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 3;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // string responseCode = 4;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 4;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const char* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:translator.UDSCloseCommChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr connectionid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadDataByIdentifierRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.ReadDataByIdentifierRequest) */ {
 public:
  ReadDataByIdentifierRequest();
  virtual ~ReadDataByIdentifierRequest();

  ReadDataByIdentifierRequest(const ReadDataByIdentifierRequest& from);

  inline ReadDataByIdentifierRequest& operator=(const ReadDataByIdentifierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadDataByIdentifierRequest(ReadDataByIdentifierRequest&& from) noexcept
    : ReadDataByIdentifierRequest() {
    *this = ::std::move(from);
  }

  inline ReadDataByIdentifierRequest& operator=(ReadDataByIdentifierRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadDataByIdentifierRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDataByIdentifierRequest* internal_default_instance() {
    return reinterpret_cast<const ReadDataByIdentifierRequest*>(
               &_ReadDataByIdentifierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReadDataByIdentifierRequest* other);
  friend void swap(ReadDataByIdentifierRequest& a, ReadDataByIdentifierRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadDataByIdentifierRequest* New() const final {
    return CreateMaybeMessage<ReadDataByIdentifierRequest>(NULL);
  }

  ReadDataByIdentifierRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadDataByIdentifierRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadDataByIdentifierRequest& from);
  void MergeFrom(const ReadDataByIdentifierRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDataByIdentifierRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string did = 4;
  int did_size() const;
  void clear_did();
  static const int kDidFieldNumber = 4;
  const ::std::string& did(int index) const;
  ::std::string* mutable_did(int index);
  void set_did(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_did(int index, ::std::string&& value);
  #endif
  void set_did(int index, const char* value);
  void set_did(int index, const char* value, size_t size);
  ::std::string* add_did();
  void add_did(const ::std::string& value);
  #if LANG_CXX11
  void add_did(::std::string&& value);
  #endif
  void add_did(const char* value);
  void add_did(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& did() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_did();

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string connectionID = 2;
  void clear_connectionid();
  static const int kConnectionIDFieldNumber = 2;
  const ::std::string& connectionid() const;
  void set_connectionid(const ::std::string& value);
  #if LANG_CXX11
  void set_connectionid(::std::string&& value);
  #endif
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  ::std::string* mutable_connectionid();
  ::std::string* release_connectionid();
  void set_allocated_connectionid(::std::string* connectionid);

  // string sequenceNo = 3;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 3;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // @@protoc_insertion_point(class_scope:translator.ReadDataByIdentifierRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> did_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr connectionid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadResponse(ReadResponse&& from) noexcept
    : ReadResponse() {
    *this = ::std::move(from);
  }

  inline ReadResponse& operator=(ReadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadResponse* internal_default_instance() {
    return reinterpret_cast<const ReadResponse*>(
               &_ReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ReadResponse* other);
  friend void swap(ReadResponse& a, ReadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const final {
    return CreateMaybeMessage<ReadResponse>(NULL);
  }

  ReadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string did = 1;
  void clear_did();
  static const int kDidFieldNumber = 1;
  const ::std::string& did() const;
  void set_did(const ::std::string& value);
  #if LANG_CXX11
  void set_did(::std::string&& value);
  #endif
  void set_did(const char* value);
  void set_did(const char* value, size_t size);
  ::std::string* mutable_did();
  ::std::string* release_did();
  void set_allocated_did(::std::string* did);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string responseCode = 3;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 3;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const char* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:translator.ReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr did_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadDataByIdentifierResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:translator.ReadDataByIdentifierResponse) */ {
 public:
  ReadDataByIdentifierResponse();
  virtual ~ReadDataByIdentifierResponse();

  ReadDataByIdentifierResponse(const ReadDataByIdentifierResponse& from);

  inline ReadDataByIdentifierResponse& operator=(const ReadDataByIdentifierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadDataByIdentifierResponse(ReadDataByIdentifierResponse&& from) noexcept
    : ReadDataByIdentifierResponse() {
    *this = ::std::move(from);
  }

  inline ReadDataByIdentifierResponse& operator=(ReadDataByIdentifierResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadDataByIdentifierResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadDataByIdentifierResponse* internal_default_instance() {
    return reinterpret_cast<const ReadDataByIdentifierResponse*>(
               &_ReadDataByIdentifierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReadDataByIdentifierResponse* other);
  friend void swap(ReadDataByIdentifierResponse& a, ReadDataByIdentifierResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadDataByIdentifierResponse* New() const final {
    return CreateMaybeMessage<ReadDataByIdentifierResponse>(NULL);
  }

  ReadDataByIdentifierResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadDataByIdentifierResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadDataByIdentifierResponse& from);
  void MergeFrom(const ReadDataByIdentifierResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadDataByIdentifierResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .translator.ReadResponse data = 4;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  ::translator::ReadResponse* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField< ::translator::ReadResponse >*
      mutable_data();
  const ::translator::ReadResponse& data(int index) const;
  ::translator::ReadResponse* add_data();
  const ::google::protobuf::RepeatedPtrField< ::translator::ReadResponse >&
      data() const;

  // string appID = 1;
  void clear_appid();
  static const int kAppIDFieldNumber = 1;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // string connectionID = 2;
  void clear_connectionid();
  static const int kConnectionIDFieldNumber = 2;
  const ::std::string& connectionid() const;
  void set_connectionid(const ::std::string& value);
  #if LANG_CXX11
  void set_connectionid(::std::string&& value);
  #endif
  void set_connectionid(const char* value);
  void set_connectionid(const char* value, size_t size);
  ::std::string* mutable_connectionid();
  ::std::string* release_connectionid();
  void set_allocated_connectionid(::std::string* connectionid);

  // string sequenceNo = 3;
  void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 3;
  const ::std::string& sequenceno() const;
  void set_sequenceno(const ::std::string& value);
  #if LANG_CXX11
  void set_sequenceno(::std::string&& value);
  #endif
  void set_sequenceno(const char* value);
  void set_sequenceno(const char* value, size_t size);
  ::std::string* mutable_sequenceno();
  ::std::string* release_sequenceno();
  void set_allocated_sequenceno(::std::string* sequenceno);

  // string responseCode = 5;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 5;
  const ::std::string& responsecode() const;
  void set_responsecode(const ::std::string& value);
  #if LANG_CXX11
  void set_responsecode(::std::string&& value);
  #endif
  void set_responsecode(const char* value);
  void set_responsecode(const char* value, size_t size);
  ::std::string* mutable_responsecode();
  ::std::string* release_responsecode();
  void set_allocated_responsecode(::std::string* responsecode);

  // @@protoc_insertion_point(class_scope:translator.ReadDataByIdentifierResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::translator::ReadResponse > data_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr connectionid_;
  ::google::protobuf::internal::ArenaStringPtr sequenceno_;
  ::google::protobuf::internal::ArenaStringPtr responsecode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_translator_2dprotobuf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetClaimedAddressRequest

// string appID = 1;
inline void GetClaimedAddressRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressRequest::appid() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressRequest.appID)
  return appid_.GetNoArena();
}
inline void GetClaimedAddressRequest::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressRequest.appID)
}
#if LANG_CXX11
inline void GetClaimedAddressRequest::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressRequest.appID)
}
#endif
inline void GetClaimedAddressRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressRequest.appID)
}
inline void GetClaimedAddressRequest::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressRequest.appID)
}
inline ::std::string* GetClaimedAddressRequest::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressRequest.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressRequest::release_appid() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressRequest.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressRequest.appID)
}

// string sequenceNo = 2;
inline void GetClaimedAddressRequest::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressRequest::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressRequest.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void GetClaimedAddressRequest::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressRequest.sequenceNo)
}
#if LANG_CXX11
inline void GetClaimedAddressRequest::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressRequest.sequenceNo)
}
#endif
inline void GetClaimedAddressRequest::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressRequest.sequenceNo)
}
inline void GetClaimedAddressRequest::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressRequest.sequenceNo)
}
inline ::std::string* GetClaimedAddressRequest::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressRequest.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressRequest::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressRequest.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressRequest::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressRequest.sequenceNo)
}

// -------------------------------------------------------------------

// GetClaimedAddressResponse

// string appID = 1;
inline void GetClaimedAddressResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressResponse::appid() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressResponse.appID)
  return appid_.GetNoArena();
}
inline void GetClaimedAddressResponse::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressResponse.appID)
}
#if LANG_CXX11
inline void GetClaimedAddressResponse::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressResponse.appID)
}
#endif
inline void GetClaimedAddressResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressResponse.appID)
}
inline void GetClaimedAddressResponse::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressResponse.appID)
}
inline ::std::string* GetClaimedAddressResponse::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressResponse.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressResponse::release_appid() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressResponse.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressResponse.appID)
}

// string sequenceNo = 2;
inline void GetClaimedAddressResponse::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressResponse::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressResponse.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void GetClaimedAddressResponse::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressResponse.sequenceNo)
}
#if LANG_CXX11
inline void GetClaimedAddressResponse::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressResponse.sequenceNo)
}
#endif
inline void GetClaimedAddressResponse::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressResponse.sequenceNo)
}
inline void GetClaimedAddressResponse::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressResponse.sequenceNo)
}
inline ::std::string* GetClaimedAddressResponse::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressResponse.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressResponse::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressResponse.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressResponse::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressResponse.sequenceNo)
}

// string claimedAddress = 3;
inline void GetClaimedAddressResponse::clear_claimedaddress() {
  claimedaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressResponse::claimedaddress() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressResponse.claimedAddress)
  return claimedaddress_.GetNoArena();
}
inline void GetClaimedAddressResponse::set_claimedaddress(const ::std::string& value) {
  
  claimedaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressResponse.claimedAddress)
}
#if LANG_CXX11
inline void GetClaimedAddressResponse::set_claimedaddress(::std::string&& value) {
  
  claimedaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressResponse.claimedAddress)
}
#endif
inline void GetClaimedAddressResponse::set_claimedaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  claimedaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressResponse.claimedAddress)
}
inline void GetClaimedAddressResponse::set_claimedaddress(const char* value, size_t size) {
  
  claimedaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressResponse.claimedAddress)
}
inline ::std::string* GetClaimedAddressResponse::mutable_claimedaddress() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressResponse.claimedAddress)
  return claimedaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressResponse::release_claimedaddress() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressResponse.claimedAddress)
  
  return claimedaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressResponse::set_allocated_claimedaddress(::std::string* claimedaddress) {
  if (claimedaddress != NULL) {
    
  } else {
    
  }
  claimedaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), claimedaddress);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressResponse.claimedAddress)
}

// string responseCode = 4;
inline void GetClaimedAddressResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClaimedAddressResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:translator.GetClaimedAddressResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void GetClaimedAddressResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.GetClaimedAddressResponse.responseCode)
}
#if LANG_CXX11
inline void GetClaimedAddressResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.GetClaimedAddressResponse.responseCode)
}
#endif
inline void GetClaimedAddressResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.GetClaimedAddressResponse.responseCode)
}
inline void GetClaimedAddressResponse::set_responsecode(const char* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.GetClaimedAddressResponse.responseCode)
}
inline ::std::string* GetClaimedAddressResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:translator.GetClaimedAddressResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClaimedAddressResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:translator.GetClaimedAddressResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClaimedAddressResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:translator.GetClaimedAddressResponse.responseCode)
}

// -------------------------------------------------------------------

// UDSCANFormat

// string canPhysReqFormat = 1;
inline void UDSCANFormat::clear_canphysreqformat() {
  canphysreqformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCANFormat::canphysreqformat() const {
  // @@protoc_insertion_point(field_get:translator.UDSCANFormat.canPhysReqFormat)
  return canphysreqformat_.GetNoArena();
}
inline void UDSCANFormat::set_canphysreqformat(const ::std::string& value) {
  
  canphysreqformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCANFormat.canPhysReqFormat)
}
#if LANG_CXX11
inline void UDSCANFormat::set_canphysreqformat(::std::string&& value) {
  
  canphysreqformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCANFormat.canPhysReqFormat)
}
#endif
inline void UDSCANFormat::set_canphysreqformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canphysreqformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCANFormat.canPhysReqFormat)
}
inline void UDSCANFormat::set_canphysreqformat(const char* value, size_t size) {
  
  canphysreqformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCANFormat.canPhysReqFormat)
}
inline ::std::string* UDSCANFormat::mutable_canphysreqformat() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCANFormat.canPhysReqFormat)
  return canphysreqformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCANFormat::release_canphysreqformat() {
  // @@protoc_insertion_point(field_release:translator.UDSCANFormat.canPhysReqFormat)
  
  return canphysreqformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCANFormat::set_allocated_canphysreqformat(::std::string* canphysreqformat) {
  if (canphysreqformat != NULL) {
    
  } else {
    
  }
  canphysreqformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canphysreqformat);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCANFormat.canPhysReqFormat)
}

// string canRespUSDTFormat = 2;
inline void UDSCANFormat::clear_canrespusdtformat() {
  canrespusdtformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCANFormat::canrespusdtformat() const {
  // @@protoc_insertion_point(field_get:translator.UDSCANFormat.canRespUSDTFormat)
  return canrespusdtformat_.GetNoArena();
}
inline void UDSCANFormat::set_canrespusdtformat(const ::std::string& value) {
  
  canrespusdtformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCANFormat.canRespUSDTFormat)
}
#if LANG_CXX11
inline void UDSCANFormat::set_canrespusdtformat(::std::string&& value) {
  
  canrespusdtformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCANFormat.canRespUSDTFormat)
}
#endif
inline void UDSCANFormat::set_canrespusdtformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canrespusdtformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCANFormat.canRespUSDTFormat)
}
inline void UDSCANFormat::set_canrespusdtformat(const char* value, size_t size) {
  
  canrespusdtformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCANFormat.canRespUSDTFormat)
}
inline ::std::string* UDSCANFormat::mutable_canrespusdtformat() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCANFormat.canRespUSDTFormat)
  return canrespusdtformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCANFormat::release_canrespusdtformat() {
  // @@protoc_insertion_point(field_release:translator.UDSCANFormat.canRespUSDTFormat)
  
  return canrespusdtformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCANFormat::set_allocated_canrespusdtformat(::std::string* canrespusdtformat) {
  if (canrespusdtformat != NULL) {
    
  } else {
    
  }
  canrespusdtformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canrespusdtformat);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCANFormat.canRespUSDTFormat)
}

// -------------------------------------------------------------------

// UDSOpenCommChannelRequest

// string appID = 1;
inline void UDSOpenCommChannelRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelRequest::appid() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.appID)
  return appid_.GetNoArena();
}
inline void UDSOpenCommChannelRequest::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelRequest.appID)
}
#if LANG_CXX11
inline void UDSOpenCommChannelRequest::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelRequest.appID)
}
#endif
inline void UDSOpenCommChannelRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelRequest.appID)
}
inline void UDSOpenCommChannelRequest::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelRequest.appID)
}
inline ::std::string* UDSOpenCommChannelRequest::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelRequest::release_appid() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelRequest.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelRequest.appID)
}

// string sequenceNo = 2;
inline void UDSOpenCommChannelRequest::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelRequest::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void UDSOpenCommChannelRequest::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelRequest.sequenceNo)
}
#if LANG_CXX11
inline void UDSOpenCommChannelRequest::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelRequest.sequenceNo)
}
#endif
inline void UDSOpenCommChannelRequest::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelRequest.sequenceNo)
}
inline void UDSOpenCommChannelRequest::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelRequest.sequenceNo)
}
inline ::std::string* UDSOpenCommChannelRequest::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelRequest::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelRequest.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelRequest::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelRequest.sequenceNo)
}

// string toolAddress = 3;
inline void UDSOpenCommChannelRequest::clear_tooladdress() {
  tooladdress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelRequest::tooladdress() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.toolAddress)
  return tooladdress_.GetNoArena();
}
inline void UDSOpenCommChannelRequest::set_tooladdress(const ::std::string& value) {
  
  tooladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelRequest.toolAddress)
}
#if LANG_CXX11
inline void UDSOpenCommChannelRequest::set_tooladdress(::std::string&& value) {
  
  tooladdress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelRequest.toolAddress)
}
#endif
inline void UDSOpenCommChannelRequest::set_tooladdress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tooladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelRequest.toolAddress)
}
inline void UDSOpenCommChannelRequest::set_tooladdress(const char* value, size_t size) {
  
  tooladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelRequest.toolAddress)
}
inline ::std::string* UDSOpenCommChannelRequest::mutable_tooladdress() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.toolAddress)
  return tooladdress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelRequest::release_tooladdress() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelRequest.toolAddress)
  
  return tooladdress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelRequest::set_allocated_tooladdress(::std::string* tooladdress) {
  if (tooladdress != NULL) {
    
  } else {
    
  }
  tooladdress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tooladdress);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelRequest.toolAddress)
}

// string ecuAddress = 4;
inline void UDSOpenCommChannelRequest::clear_ecuaddress() {
  ecuaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelRequest::ecuaddress() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.ecuAddress)
  return ecuaddress_.GetNoArena();
}
inline void UDSOpenCommChannelRequest::set_ecuaddress(const ::std::string& value) {
  
  ecuaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelRequest.ecuAddress)
}
#if LANG_CXX11
inline void UDSOpenCommChannelRequest::set_ecuaddress(::std::string&& value) {
  
  ecuaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelRequest.ecuAddress)
}
#endif
inline void UDSOpenCommChannelRequest::set_ecuaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ecuaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelRequest.ecuAddress)
}
inline void UDSOpenCommChannelRequest::set_ecuaddress(const char* value, size_t size) {
  
  ecuaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelRequest.ecuAddress)
}
inline ::std::string* UDSOpenCommChannelRequest::mutable_ecuaddress() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.ecuAddress)
  return ecuaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelRequest::release_ecuaddress() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelRequest.ecuAddress)
  
  return ecuaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelRequest::set_allocated_ecuaddress(::std::string* ecuaddress) {
  if (ecuaddress != NULL) {
    
  } else {
    
  }
  ecuaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ecuaddress);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelRequest.ecuAddress)
}

// repeated .translator.UDSCANFormat canFormat = 5;
inline int UDSOpenCommChannelRequest::canformat_size() const {
  return canformat_.size();
}
inline void UDSOpenCommChannelRequest::clear_canformat() {
  canformat_.Clear();
}
inline ::translator::UDSCANFormat* UDSOpenCommChannelRequest::mutable_canformat(int index) {
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.canFormat)
  return canformat_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::translator::UDSCANFormat >*
UDSOpenCommChannelRequest::mutable_canformat() {
  // @@protoc_insertion_point(field_mutable_list:translator.UDSOpenCommChannelRequest.canFormat)
  return &canformat_;
}
inline const ::translator::UDSCANFormat& UDSOpenCommChannelRequest::canformat(int index) const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.canFormat)
  return canformat_.Get(index);
}
inline ::translator::UDSCANFormat* UDSOpenCommChannelRequest::add_canformat() {
  // @@protoc_insertion_point(field_add:translator.UDSOpenCommChannelRequest.canFormat)
  return canformat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::translator::UDSCANFormat >&
UDSOpenCommChannelRequest::canformat() const {
  // @@protoc_insertion_point(field_list:translator.UDSOpenCommChannelRequest.canFormat)
  return canformat_;
}

// string resourceName = 6;
inline void UDSOpenCommChannelRequest::clear_resourcename() {
  resourcename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelRequest::resourcename() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelRequest.resourceName)
  return resourcename_.GetNoArena();
}
inline void UDSOpenCommChannelRequest::set_resourcename(const ::std::string& value) {
  
  resourcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelRequest.resourceName)
}
#if LANG_CXX11
inline void UDSOpenCommChannelRequest::set_resourcename(::std::string&& value) {
  
  resourcename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelRequest.resourceName)
}
#endif
inline void UDSOpenCommChannelRequest::set_resourcename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resourcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelRequest.resourceName)
}
inline void UDSOpenCommChannelRequest::set_resourcename(const char* value, size_t size) {
  
  resourcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelRequest.resourceName)
}
inline ::std::string* UDSOpenCommChannelRequest::mutable_resourcename() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelRequest.resourceName)
  return resourcename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelRequest::release_resourcename() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelRequest.resourceName)
  
  return resourcename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelRequest::set_allocated_resourcename(::std::string* resourcename) {
  if (resourcename != NULL) {
    
  } else {
    
  }
  resourcename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcename);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelRequest.resourceName)
}

// -------------------------------------------------------------------

// UDSOpenCommChannelResponse

// string appID = 1;
inline void UDSOpenCommChannelResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelResponse::appid() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelResponse.appID)
  return appid_.GetNoArena();
}
inline void UDSOpenCommChannelResponse::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelResponse.appID)
}
#if LANG_CXX11
inline void UDSOpenCommChannelResponse::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelResponse.appID)
}
#endif
inline void UDSOpenCommChannelResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelResponse.appID)
}
inline void UDSOpenCommChannelResponse::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelResponse.appID)
}
inline ::std::string* UDSOpenCommChannelResponse::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelResponse.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelResponse::release_appid() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelResponse.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelResponse.appID)
}

// string connectionID = 2;
inline void UDSOpenCommChannelResponse::clear_connectionid() {
  connectionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelResponse::connectionid() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelResponse.connectionID)
  return connectionid_.GetNoArena();
}
inline void UDSOpenCommChannelResponse::set_connectionid(const ::std::string& value) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelResponse.connectionID)
}
#if LANG_CXX11
inline void UDSOpenCommChannelResponse::set_connectionid(::std::string&& value) {
  
  connectionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelResponse.connectionID)
}
#endif
inline void UDSOpenCommChannelResponse::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelResponse.connectionID)
}
inline void UDSOpenCommChannelResponse::set_connectionid(const char* value, size_t size) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelResponse.connectionID)
}
inline ::std::string* UDSOpenCommChannelResponse::mutable_connectionid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelResponse.connectionID)
  return connectionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelResponse::release_connectionid() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelResponse.connectionID)
  
  return connectionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelResponse::set_allocated_connectionid(::std::string* connectionid) {
  if (connectionid != NULL) {
    
  } else {
    
  }
  connectionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectionid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelResponse.connectionID)
}

// string sequenceNo = 3;
inline void UDSOpenCommChannelResponse::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelResponse::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelResponse.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void UDSOpenCommChannelResponse::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelResponse.sequenceNo)
}
#if LANG_CXX11
inline void UDSOpenCommChannelResponse::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelResponse.sequenceNo)
}
#endif
inline void UDSOpenCommChannelResponse::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelResponse.sequenceNo)
}
inline void UDSOpenCommChannelResponse::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelResponse.sequenceNo)
}
inline ::std::string* UDSOpenCommChannelResponse::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelResponse.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelResponse::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelResponse.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelResponse::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelResponse.sequenceNo)
}

// string responseCode = 4;
inline void UDSOpenCommChannelResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSOpenCommChannelResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:translator.UDSOpenCommChannelResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void UDSOpenCommChannelResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSOpenCommChannelResponse.responseCode)
}
#if LANG_CXX11
inline void UDSOpenCommChannelResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSOpenCommChannelResponse.responseCode)
}
#endif
inline void UDSOpenCommChannelResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSOpenCommChannelResponse.responseCode)
}
inline void UDSOpenCommChannelResponse::set_responsecode(const char* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSOpenCommChannelResponse.responseCode)
}
inline ::std::string* UDSOpenCommChannelResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSOpenCommChannelResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSOpenCommChannelResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:translator.UDSOpenCommChannelResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSOpenCommChannelResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSOpenCommChannelResponse.responseCode)
}

// -------------------------------------------------------------------

// UDSCloseCommChannelRequest

// string appID = 1;
inline void UDSCloseCommChannelRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelRequest::appid() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelRequest.appID)
  return appid_.GetNoArena();
}
inline void UDSCloseCommChannelRequest::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelRequest.appID)
}
#if LANG_CXX11
inline void UDSCloseCommChannelRequest::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelRequest.appID)
}
#endif
inline void UDSCloseCommChannelRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelRequest.appID)
}
inline void UDSCloseCommChannelRequest::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelRequest.appID)
}
inline ::std::string* UDSCloseCommChannelRequest::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelRequest.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelRequest::release_appid() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelRequest.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelRequest.appID)
}

// string connectionID = 2;
inline void UDSCloseCommChannelRequest::clear_connectionid() {
  connectionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelRequest::connectionid() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelRequest.connectionID)
  return connectionid_.GetNoArena();
}
inline void UDSCloseCommChannelRequest::set_connectionid(const ::std::string& value) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelRequest.connectionID)
}
#if LANG_CXX11
inline void UDSCloseCommChannelRequest::set_connectionid(::std::string&& value) {
  
  connectionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelRequest.connectionID)
}
#endif
inline void UDSCloseCommChannelRequest::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelRequest.connectionID)
}
inline void UDSCloseCommChannelRequest::set_connectionid(const char* value, size_t size) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelRequest.connectionID)
}
inline ::std::string* UDSCloseCommChannelRequest::mutable_connectionid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelRequest.connectionID)
  return connectionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelRequest::release_connectionid() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelRequest.connectionID)
  
  return connectionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelRequest::set_allocated_connectionid(::std::string* connectionid) {
  if (connectionid != NULL) {
    
  } else {
    
  }
  connectionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectionid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelRequest.connectionID)
}

// string sequenceNo = 3;
inline void UDSCloseCommChannelRequest::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelRequest::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelRequest.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void UDSCloseCommChannelRequest::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelRequest.sequenceNo)
}
#if LANG_CXX11
inline void UDSCloseCommChannelRequest::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelRequest.sequenceNo)
}
#endif
inline void UDSCloseCommChannelRequest::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelRequest.sequenceNo)
}
inline void UDSCloseCommChannelRequest::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelRequest.sequenceNo)
}
inline ::std::string* UDSCloseCommChannelRequest::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelRequest.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelRequest::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelRequest.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelRequest::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelRequest.sequenceNo)
}

// -------------------------------------------------------------------

// UDSCloseCommChannelResponse

// string appID = 1;
inline void UDSCloseCommChannelResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelResponse::appid() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelResponse.appID)
  return appid_.GetNoArena();
}
inline void UDSCloseCommChannelResponse::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelResponse.appID)
}
#if LANG_CXX11
inline void UDSCloseCommChannelResponse::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelResponse.appID)
}
#endif
inline void UDSCloseCommChannelResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelResponse.appID)
}
inline void UDSCloseCommChannelResponse::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelResponse.appID)
}
inline ::std::string* UDSCloseCommChannelResponse::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelResponse.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelResponse::release_appid() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelResponse.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelResponse.appID)
}

// string connectionID = 2;
inline void UDSCloseCommChannelResponse::clear_connectionid() {
  connectionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelResponse::connectionid() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelResponse.connectionID)
  return connectionid_.GetNoArena();
}
inline void UDSCloseCommChannelResponse::set_connectionid(const ::std::string& value) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelResponse.connectionID)
}
#if LANG_CXX11
inline void UDSCloseCommChannelResponse::set_connectionid(::std::string&& value) {
  
  connectionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelResponse.connectionID)
}
#endif
inline void UDSCloseCommChannelResponse::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelResponse.connectionID)
}
inline void UDSCloseCommChannelResponse::set_connectionid(const char* value, size_t size) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelResponse.connectionID)
}
inline ::std::string* UDSCloseCommChannelResponse::mutable_connectionid() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelResponse.connectionID)
  return connectionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelResponse::release_connectionid() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelResponse.connectionID)
  
  return connectionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelResponse::set_allocated_connectionid(::std::string* connectionid) {
  if (connectionid != NULL) {
    
  } else {
    
  }
  connectionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectionid);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelResponse.connectionID)
}

// string sequenceNo = 3;
inline void UDSCloseCommChannelResponse::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelResponse::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelResponse.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void UDSCloseCommChannelResponse::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelResponse.sequenceNo)
}
#if LANG_CXX11
inline void UDSCloseCommChannelResponse::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelResponse.sequenceNo)
}
#endif
inline void UDSCloseCommChannelResponse::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelResponse.sequenceNo)
}
inline void UDSCloseCommChannelResponse::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelResponse.sequenceNo)
}
inline ::std::string* UDSCloseCommChannelResponse::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelResponse.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelResponse::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelResponse.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelResponse::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelResponse.sequenceNo)
}

// string responseCode = 4;
inline void UDSCloseCommChannelResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UDSCloseCommChannelResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:translator.UDSCloseCommChannelResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void UDSCloseCommChannelResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.UDSCloseCommChannelResponse.responseCode)
}
#if LANG_CXX11
inline void UDSCloseCommChannelResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.UDSCloseCommChannelResponse.responseCode)
}
#endif
inline void UDSCloseCommChannelResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.UDSCloseCommChannelResponse.responseCode)
}
inline void UDSCloseCommChannelResponse::set_responsecode(const char* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.UDSCloseCommChannelResponse.responseCode)
}
inline ::std::string* UDSCloseCommChannelResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:translator.UDSCloseCommChannelResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UDSCloseCommChannelResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:translator.UDSCloseCommChannelResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UDSCloseCommChannelResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:translator.UDSCloseCommChannelResponse.responseCode)
}

// -------------------------------------------------------------------

// ReadDataByIdentifierRequest

// string appID = 1;
inline void ReadDataByIdentifierRequest::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierRequest::appid() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierRequest.appID)
  return appid_.GetNoArena();
}
inline void ReadDataByIdentifierRequest::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierRequest.appID)
}
#if LANG_CXX11
inline void ReadDataByIdentifierRequest::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierRequest.appID)
}
#endif
inline void ReadDataByIdentifierRequest::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierRequest.appID)
}
inline void ReadDataByIdentifierRequest::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierRequest.appID)
}
inline ::std::string* ReadDataByIdentifierRequest::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierRequest.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierRequest::release_appid() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierRequest.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierRequest::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierRequest.appID)
}

// string connectionID = 2;
inline void ReadDataByIdentifierRequest::clear_connectionid() {
  connectionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierRequest::connectionid() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierRequest.connectionID)
  return connectionid_.GetNoArena();
}
inline void ReadDataByIdentifierRequest::set_connectionid(const ::std::string& value) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierRequest.connectionID)
}
#if LANG_CXX11
inline void ReadDataByIdentifierRequest::set_connectionid(::std::string&& value) {
  
  connectionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierRequest.connectionID)
}
#endif
inline void ReadDataByIdentifierRequest::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierRequest.connectionID)
}
inline void ReadDataByIdentifierRequest::set_connectionid(const char* value, size_t size) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierRequest.connectionID)
}
inline ::std::string* ReadDataByIdentifierRequest::mutable_connectionid() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierRequest.connectionID)
  return connectionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierRequest::release_connectionid() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierRequest.connectionID)
  
  return connectionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierRequest::set_allocated_connectionid(::std::string* connectionid) {
  if (connectionid != NULL) {
    
  } else {
    
  }
  connectionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectionid);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierRequest.connectionID)
}

// string sequenceNo = 3;
inline void ReadDataByIdentifierRequest::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierRequest::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierRequest.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void ReadDataByIdentifierRequest::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierRequest.sequenceNo)
}
#if LANG_CXX11
inline void ReadDataByIdentifierRequest::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierRequest.sequenceNo)
}
#endif
inline void ReadDataByIdentifierRequest::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierRequest.sequenceNo)
}
inline void ReadDataByIdentifierRequest::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierRequest.sequenceNo)
}
inline ::std::string* ReadDataByIdentifierRequest::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierRequest.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierRequest::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierRequest.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierRequest::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierRequest.sequenceNo)
}

// repeated string did = 4;
inline int ReadDataByIdentifierRequest::did_size() const {
  return did_.size();
}
inline void ReadDataByIdentifierRequest::clear_did() {
  did_.Clear();
}
inline const ::std::string& ReadDataByIdentifierRequest::did(int index) const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierRequest.did)
  return did_.Get(index);
}
inline ::std::string* ReadDataByIdentifierRequest::mutable_did(int index) {
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierRequest.did)
  return did_.Mutable(index);
}
inline void ReadDataByIdentifierRequest::set_did(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierRequest.did)
  did_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReadDataByIdentifierRequest::set_did(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierRequest.did)
  did_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReadDataByIdentifierRequest::set_did(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  did_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierRequest.did)
}
inline void ReadDataByIdentifierRequest::set_did(int index, const char* value, size_t size) {
  did_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierRequest.did)
}
inline ::std::string* ReadDataByIdentifierRequest::add_did() {
  // @@protoc_insertion_point(field_add_mutable:translator.ReadDataByIdentifierRequest.did)
  return did_.Add();
}
inline void ReadDataByIdentifierRequest::add_did(const ::std::string& value) {
  did_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:translator.ReadDataByIdentifierRequest.did)
}
#if LANG_CXX11
inline void ReadDataByIdentifierRequest::add_did(::std::string&& value) {
  did_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:translator.ReadDataByIdentifierRequest.did)
}
#endif
inline void ReadDataByIdentifierRequest::add_did(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  did_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:translator.ReadDataByIdentifierRequest.did)
}
inline void ReadDataByIdentifierRequest::add_did(const char* value, size_t size) {
  did_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:translator.ReadDataByIdentifierRequest.did)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadDataByIdentifierRequest::did() const {
  // @@protoc_insertion_point(field_list:translator.ReadDataByIdentifierRequest.did)
  return did_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReadDataByIdentifierRequest::mutable_did() {
  // @@protoc_insertion_point(field_mutable_list:translator.ReadDataByIdentifierRequest.did)
  return &did_;
}

// -------------------------------------------------------------------

// ReadResponse

// string did = 1;
inline void ReadResponse::clear_did() {
  did_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadResponse::did() const {
  // @@protoc_insertion_point(field_get:translator.ReadResponse.did)
  return did_.GetNoArena();
}
inline void ReadResponse::set_did(const ::std::string& value) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadResponse.did)
}
#if LANG_CXX11
inline void ReadResponse::set_did(::std::string&& value) {
  
  did_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadResponse.did)
}
#endif
inline void ReadResponse::set_did(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadResponse.did)
}
inline void ReadResponse::set_did(const char* value, size_t size) {
  
  did_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadResponse.did)
}
inline ::std::string* ReadResponse::mutable_did() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadResponse.did)
  return did_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadResponse::release_did() {
  // @@protoc_insertion_point(field_release:translator.ReadResponse.did)
  
  return did_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_did(::std::string* did) {
  if (did != NULL) {
    
  } else {
    
  }
  did_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), did);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadResponse.did)
}

// string value = 2;
inline void ReadResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadResponse::value() const {
  // @@protoc_insertion_point(field_get:translator.ReadResponse.value)
  return value_.GetNoArena();
}
inline void ReadResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadResponse.value)
}
#if LANG_CXX11
inline void ReadResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadResponse.value)
}
#endif
inline void ReadResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadResponse.value)
}
inline void ReadResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadResponse.value)
}
inline ::std::string* ReadResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadResponse::release_value() {
  // @@protoc_insertion_point(field_release:translator.ReadResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadResponse.value)
}

// string responseCode = 3;
inline void ReadResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:translator.ReadResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void ReadResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadResponse.responseCode)
}
#if LANG_CXX11
inline void ReadResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadResponse.responseCode)
}
#endif
inline void ReadResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadResponse.responseCode)
}
inline void ReadResponse::set_responsecode(const char* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadResponse.responseCode)
}
inline ::std::string* ReadResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:translator.ReadResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadResponse.responseCode)
}

// -------------------------------------------------------------------

// ReadDataByIdentifierResponse

// string appID = 1;
inline void ReadDataByIdentifierResponse::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierResponse::appid() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierResponse.appID)
  return appid_.GetNoArena();
}
inline void ReadDataByIdentifierResponse::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierResponse.appID)
}
#if LANG_CXX11
inline void ReadDataByIdentifierResponse::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierResponse.appID)
}
#endif
inline void ReadDataByIdentifierResponse::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierResponse.appID)
}
inline void ReadDataByIdentifierResponse::set_appid(const char* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierResponse.appID)
}
inline ::std::string* ReadDataByIdentifierResponse::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierResponse.appID)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierResponse::release_appid() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierResponse.appID)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierResponse::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierResponse.appID)
}

// string connectionID = 2;
inline void ReadDataByIdentifierResponse::clear_connectionid() {
  connectionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierResponse::connectionid() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierResponse.connectionID)
  return connectionid_.GetNoArena();
}
inline void ReadDataByIdentifierResponse::set_connectionid(const ::std::string& value) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierResponse.connectionID)
}
#if LANG_CXX11
inline void ReadDataByIdentifierResponse::set_connectionid(::std::string&& value) {
  
  connectionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierResponse.connectionID)
}
#endif
inline void ReadDataByIdentifierResponse::set_connectionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierResponse.connectionID)
}
inline void ReadDataByIdentifierResponse::set_connectionid(const char* value, size_t size) {
  
  connectionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierResponse.connectionID)
}
inline ::std::string* ReadDataByIdentifierResponse::mutable_connectionid() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierResponse.connectionID)
  return connectionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierResponse::release_connectionid() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierResponse.connectionID)
  
  return connectionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierResponse::set_allocated_connectionid(::std::string* connectionid) {
  if (connectionid != NULL) {
    
  } else {
    
  }
  connectionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectionid);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierResponse.connectionID)
}

// string sequenceNo = 3;
inline void ReadDataByIdentifierResponse::clear_sequenceno() {
  sequenceno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierResponse::sequenceno() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierResponse.sequenceNo)
  return sequenceno_.GetNoArena();
}
inline void ReadDataByIdentifierResponse::set_sequenceno(const ::std::string& value) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierResponse.sequenceNo)
}
#if LANG_CXX11
inline void ReadDataByIdentifierResponse::set_sequenceno(::std::string&& value) {
  
  sequenceno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierResponse.sequenceNo)
}
#endif
inline void ReadDataByIdentifierResponse::set_sequenceno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierResponse.sequenceNo)
}
inline void ReadDataByIdentifierResponse::set_sequenceno(const char* value, size_t size) {
  
  sequenceno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierResponse.sequenceNo)
}
inline ::std::string* ReadDataByIdentifierResponse::mutable_sequenceno() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierResponse.sequenceNo)
  return sequenceno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierResponse::release_sequenceno() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierResponse.sequenceNo)
  
  return sequenceno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierResponse::set_allocated_sequenceno(::std::string* sequenceno) {
  if (sequenceno != NULL) {
    
  } else {
    
  }
  sequenceno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequenceno);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierResponse.sequenceNo)
}

// repeated .translator.ReadResponse data = 4;
inline int ReadDataByIdentifierResponse::data_size() const {
  return data_.size();
}
inline void ReadDataByIdentifierResponse::clear_data() {
  data_.Clear();
}
inline ::translator::ReadResponse* ReadDataByIdentifierResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierResponse.data)
  return data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::translator::ReadResponse >*
ReadDataByIdentifierResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:translator.ReadDataByIdentifierResponse.data)
  return &data_;
}
inline const ::translator::ReadResponse& ReadDataByIdentifierResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierResponse.data)
  return data_.Get(index);
}
inline ::translator::ReadResponse* ReadDataByIdentifierResponse::add_data() {
  // @@protoc_insertion_point(field_add:translator.ReadDataByIdentifierResponse.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::translator::ReadResponse >&
ReadDataByIdentifierResponse::data() const {
  // @@protoc_insertion_point(field_list:translator.ReadDataByIdentifierResponse.data)
  return data_;
}

// string responseCode = 5;
inline void ReadDataByIdentifierResponse::clear_responsecode() {
  responsecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadDataByIdentifierResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:translator.ReadDataByIdentifierResponse.responseCode)
  return responsecode_.GetNoArena();
}
inline void ReadDataByIdentifierResponse::set_responsecode(const ::std::string& value) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:translator.ReadDataByIdentifierResponse.responseCode)
}
#if LANG_CXX11
inline void ReadDataByIdentifierResponse::set_responsecode(::std::string&& value) {
  
  responsecode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:translator.ReadDataByIdentifierResponse.responseCode)
}
#endif
inline void ReadDataByIdentifierResponse::set_responsecode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:translator.ReadDataByIdentifierResponse.responseCode)
}
inline void ReadDataByIdentifierResponse::set_responsecode(const char* value, size_t size) {
  
  responsecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:translator.ReadDataByIdentifierResponse.responseCode)
}
inline ::std::string* ReadDataByIdentifierResponse::mutable_responsecode() {
  
  // @@protoc_insertion_point(field_mutable:translator.ReadDataByIdentifierResponse.responseCode)
  return responsecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadDataByIdentifierResponse::release_responsecode() {
  // @@protoc_insertion_point(field_release:translator.ReadDataByIdentifierResponse.responseCode)
  
  return responsecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadDataByIdentifierResponse::set_allocated_responsecode(::std::string* responsecode) {
  if (responsecode != NULL) {
    
  } else {
    
  }
  responsecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsecode);
  // @@protoc_insertion_point(field_set_allocated:translator.ReadDataByIdentifierResponse.responseCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace translator

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_translator_2dprotobuf_2eproto
